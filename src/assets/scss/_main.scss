$red: red;
body {
  // background-color: $red;
  h2 {
    // this is global variable
    $blue: blue !global;
  }
  h1 {
    // Interactive Shell (mix multiple color)
    color: $blue + $blue;
  }
}

// Mixins
@mixin firefox-message($selector) {
  body.firefox #{$selector}:before {
    content: "Hi, Firefox users!";
  }
}

// Call mixins
@include firefox-message(".header");

// For loop
@each $animal, $color, $cursor, $name in (puma, black, default), (sea-slug, blue, pointer), (egret, white, move), (abc, bcd) {
  .#{$animal}-icon {
    background-image: url('/images/#{$animal}.png');
    border: 2px solid $color;
    cursor: $cursor;
  }
}

// For loop
@each $header, $size in (h1: 2em, h2: 1.5em, h3: 1.2em) {
  #{$header} {
    font-size: $size;
  }
}

// While loop
$i: 6;
@while $i > 0 {
  .item-#{$i} {
    width: 2em * $i;
  }
  $i: $i - 2;
}

// Mixin difference param
@mixin box-shadow($shadows...) {
  -moz-box-shadow: $shadows;
  -webkit-box-shadow: $shadows;
  box-shadow: $shadows;
}

// Call mixin using @include
.shadows {
  @include box-shadow(0px 4px 5px #666, 2px 6px 10px #999, red);
}

// Assigned color
$value: red + blue + gray;

// Mixin
@mixin color($red...) {
  background-color: $red;
}

// Called mixin
body {
  @include color($value...);
}

// Dynamic add property
$color: white;
@mixin colors($color: blue) {
  background-color: $color;
  @content;
  border-color: $color;
}

// Dynamic add property and value
.colors {
  @include colors {
    color: $color;
  }
}

// Variables along with a plain CSS /, you can use #{} to insert them
  $font-size: 12px;
  $line-height: 30px;
  font: #{$font-size}/#{$line-height};
}
